PEP: 518
Title: Specifying Minimum Build System Requirements for Python Projects
Version: $Revision$
Last-Modified: $Date$
Author: Brett Cannon <brett@python.org>,
        Nathaniel Smith <njs@pobox.com>,
        Donald Stufft <donald@stufft.io>
BDFL-Delegate: Nick Coghlan
Discussions-To: distutils-sig <distutils-sig at python.org>
Status: Final
Type: Standards Track
Content-Type: text/x-rst
Created: 10-May-2016
Post-History: 10-May-2016,
              11-May-2016,
              13-May-2016
Resolution: https://mail.python.org/pipermail/distutils-sig/2016-May/028969.html


Abstract
========

This PEP specifies how Python software packages should specify what
build dependencies they have in order to execute their chosen build
system. As part of this specification, a new configuration file is
introduced for software packages to use to specify their build
dependencies (with the expectation that the same configuration file
will be used for future configuration details).

この PEP は、Python ソフトウェアパッケージが選択したビルドシステムを実行するために、どのようにビルド依存性を指定すべきかを規定しています。この仕様の一部として、ソフトウェアパッケージがビルド依存関係を指定するために使用する新しい設定ファイルが導入されました (将来の設定の詳細については同じ設定ファイルが使用されることを期待しています)。

Rationale
=========

When Python first developed its tooling for building distributions of
software for projects, distutils [#distutils]_ was the chosen
solution. As time went on, setuptools [#setuptools]_ gained popularity
to add some features on top of distutils. Both used the concept of a
``setup.py`` file that project maintainers executed to build
distributions of their software (as well as users to install said
distribution).

Python が最初にプロジェクト用のソフトウェアのディストリビューションを構築するためのツールを開発したとき、 distutils [#distutils]_ が選ばれたソリューションでした。時が経つにつれ、 distutils の上にいくつかの機能を追加する setuptools [#setuptools]_ が人気を博しました。どちらも ``setup.py`` ファイルのコンセプトを利用しており、プロジェクトのメンテナが自分たちのソフトウェアのディストリビューションを構築するために実行しました (ユーザがそのディストリビューションをインストールするためにも)。

Using an executable file to specify build requirements under distutils
isn't an issue as distutils is part of Python's standard library.
Having the build tool as part of Python means that a ``setup.py`` has
no external dependency that a project maintainer needs to worry about
to build a distribution of their project. There was no need to specify
any dependency information as the only dependency is Python.

distutils は Python の標準ライブラリの一部なので、実行ファイルを使って distutils でビルド要件を指定することは問題ではありません。ビルドツールをPythonの一部として使うことは、 ``setup.py`` にはプロジェクトのディストリビューションをビルドするためにプロジェクトメンテナが気にする必要のある外部依存関係がないことを意味します。依存関係はPythonだけなので、依存関係情報を指定する必要はありません。

But when a project chooses to use setuptools, the use of an executable
file like ``setup.py`` becomes an issue. You can't execute a
``setup.py`` file without knowing its dependencies, but currently
there is no standard way to know what those dependencies are in an
automated fashion without executing the ``setup.py`` file where that
information is stored. It's a catch-22 of a file not being runnable
without knowing its own contents which can't be known programmatically
unless you run the file.

しかし、プロジェクトが setuptools を使うことを選択した場合、 ``setup.py`` のような実行ファイルを使うことが問題になります。依存関係を知らずに ``setup.py`` ファイルを実行できないにもかかわらず、 ``setup.py`` ファイルを実行せずにその依存関係を知る標準的な方法は今のところありません。これはファイルを実行しなければプログラム的に知ることができない、ファイルの内容を知らなければ実行できないというキャッチ22（キャッチ22は英語で「ジレンマ」、「どうあがいても身動きの取れない（状況）」を指すスラングとして定着している）です。

Setuptools tried to solve this with a ``setup_requires`` argument to
its ``setup()`` function [#setup_args]_. This solution has a number
of issues, such as:

Setuptools は ``setup()`` 関数 [#setup_args]_ の引数 ``setup_requires`` でこの問題を解決しようとしました。この解決策には以下のような問題があります:

* No tooling (besides setuptools itself) can access this information
  without executing the ``setup.py``, but ``setup.py`` can't be
  executed without having these items installed.

* setup.py``を実行しないと(setuptools 自体以外の)どのツールもこの情報にアクセスできませんが、これらの項目がインストールされていないと ``setup.py``は実行できません。

* While setuptools itself will install anything listed in this, they
  won't be installed until *during* the execution of the ``setup()``
  function, which means that the only way to actually use anything
  added here is through increasingly complex machinations that delay
  the import and usage of these modules until later on in the
  execution of the ``setup()`` function.

* つまり、ここに追加されたものを実際に使うには、モジュールのインポートや使用を ``setup()`` 関数の実行の後半まで遅らせるような複雑な細工をするしかありません。

* This cannot include ``setuptools`` itself nor can it include a
  replacement to ``setuptools``, which means that projects such as
  ``numpy.distutils`` are largely incapable of utilizing it and
  projects cannot take advantage of newer setuptools features until
  their users naturally upgrade the version of setuptools to a newer
  one.

* つまり、 ``numpy.distutils`` のようなプロジェクトはほとんどこれを利用することができませんし、ユーザが自然に setuptools のバージョンを新しいものにアップグレードするまでは、新しい setuptools の機能を利用することができません。

* The items listed in ``setup_requires`` get implicitly installed
  whenever you execute the ``setup.py`` but one of the common ways
  that the ``setup.py`` is executed is via another tool, such as
  ``pip``, who is already managing dependencies. This means that
  a command like ``pip install spam`` might end up having both
  pip and setuptools downloading and installing packages and end
  users needing to configure *both* tools (and for ``setuptools``
  without being in control of the invocation) to change settings
  like which repository it installs from. It also means that users
  need to be aware of the discovery rules for both tools, as one
  may support different package formats or determine the latest
  version differently.

* setup_requires``に記載されている項目は ``setup.py`` を実行すると必ず暗黙のうちにインストールされますが、 ``setup.py`` が実行される一般的な方法の一つは、すでに依存関係を管理している ``pip`` のような他のツールを経由して実行されることです。つまり、 ``pip install spam`` のようなコマンドを実行すると、結局 pip と setuptools の両方がパッケージをダウンロードしてインストールすることになり、エンドユーザはどのリポジトリからインストールするかなどの設定を変更するために、両方のツールを設定する必要があります (そして ``setuptools`` の場合は呼び出しを制御しないで)。また、どちらかが異なるパッケージフォーマットをサポートしていたり、 最新バージョンの判定が異なっていたりするため、ユーザは両方のツールの発見ルールを 意識する必要があるということになります。

This has culminated in a situation where use of ``setup_requires``
is rare, where projects tend to either simply copy and paste snippets
between ``setup.py`` files or they eschew it all together in favor
of simply documenting elsewhere what they expect the user to have
manually installed prior to attempting to build or install their
project.

その結果、 ``setup_requires`` を使うことはほとんどなく、プロジェクトは ``setup.py`` ファイル間のスニペットを単純にコピー＆ペーストするか、あるいはプロジェクトをビルドしたりインストールしたりする前に、ユーザーが手動でインストールすることを想定しているものを他の場所で文書化するかのどちらかを選択する傾向があります。

All of this has led pip [#pip]_ to simply assume that setuptools is
necessary when executing a ``setup.py`` file. The problem with this,
though, is it doesn't scale if another project began to gain traction
in the community as setuptools has. It also prevents other projects
from gaining traction due to the friction required to use it with a
project when pip can't infer the fact that something other than
setuptools is required.

これらのことから、pip [#pip]_ は単に ``setup.py`` ファイルを実行するときに setuptools が必要であると仮定しています。しかし、この場合の問題点は、他のプロジェクトが setuptools のようにコミュニティで人気を集め始めた場合には拡張性がないということです。また、setuptools 以外の何かが必要であることを pip が推論できない場合に、プロジェクトで setuptools を使うのに必要な摩擦が発生するため、他のプロジェクトが人気を集めるのを妨げてしまいます。

This PEP attempts to rectify the situation by specifying a way to list
the minimal dependencies of the build system of a project in a
declarative fashion in a specific file. This allows a project to list
what build dependencies it has to go from e.g. source checkout to
wheel, while not falling into the catch-22 trap that a ``setup.py``
has where tooling can't infer what a project needs to build itself.
Implementing this PEP will allow projects to specify what build system
they depend on upfront so that tools like pip can make sure that they
are installed in order to run the build system to build the project.

この PEP は、プロジェクトのビルドシステムの最小の依存関係を特定のファイルに宣言的にリストアップする方法を指定することで、この状況を是正しようとしています。これにより、 ``setup.py`` のように、ツールがプロジェクト自身のビルドに必要なものを推論できないような罠に陥らないようにしながら、例えばソースチェックアウトからホイールに至るまでのビルド依存関係をリストアップすることができます。このPEPを実装することで、プロジェクトがどのビルドシステムに依存しているかを前もって指定できるようになり、pipのようなツールがプロジェクトをビルドするためのビルドシステムを実行するためにそれらがインストールされていることを確認できるようになります。

To provide more context and motivation for this PEP, think of the
(rough) steps required to produce a built artifact for a project:

このPEPのためのより多くの文脈と動機を提供するために、プロジェクトのために構築された成果物を作成するために必要な（大まかな）ステップを考えてみてください。

1. The source checkout of the project.
   プロジェクトのソースチェックアウト
2. Installation of the build system.
   ビルドシステムのインストール
3. Execute the build system.
   ビルドシステムを実行する

This PEP covers step #2. PEP 517 covers step #3, including how to have
the build system dynamically specify more dependencies that the build
system requires to perform its job. The purpose of this PEP though, is
to specify the minimal set of requirements for the build system to
simply begin execution.

この PEP はステップ 2 をカバーしています。PEP 517 は、ビルドシステムがその仕事を実行するために必要な依存関係を動的に指定する方法を含む、ステップ 3 をカバーしています。しかし、この PEP の目的は、ビルドシステムが単に実行を開始するための最低限の要件を指定することです。

Specification
=============

File Format
-----------

The build system dependencies will be stored in a file named
``pyproject.toml`` that is written in the TOML format [#toml]_.

ビルドシステムの依存関係は、TOML形式[#toml]_で書かれた ``pyproject.toml`` という名前のファイルに保存されます。

This format was chosen as it is human-usable (unlike JSON [#json]_),
it is flexible enough (unlike configparser [#configparser]_), stems
from a standard (also unlike configparser [#configparser]_), and it
is not overly complex (unlike YAML [#yaml]_). The TOML format is
already in use by the Rust community as part of their
Cargo package manager [#cargo]_ and in private email stated they have
been quite happy with their choice of TOML. A more thorough
discussion as to why various alternatives were not chosen can be read
in the `Other file formats`_ section. The authors do realize, though,
that choice of configuration file format is ultimately subjective and
a choice had to be made and the authors prefer TOML for this situation.

このフォーマットは、人間が利用できる（JSON [#json]_とは異なり）、柔軟性があり（configparser [#configparser]_とは異なり）、標準に基づいており（configparser [#configparser]_とは異なり）、過度に複雑ではない（YAML [#yaml]_とは異なり）という理由で選ばれました。TOMLフォーマットはすでにRustコミュニティでカーゴパッケージマネージャ[#cargo]_の一部として使用されており、TOMLを選択したことに満足しているとプライベートメールで述べています。なぜ様々な選択肢が選ばれなかったのかについてのより詳細な議論は `その他のファイルフォーマット`_ のセクションを参照してください。しかし、設定ファイル形式の選択は最終的には主観的なものであり、選択しなければならなかったことを著者は理解しています。

Below we list the tables that tools are expected to recognize/respect.
Tables not specified in this PEP are reserved for future use by other
PEPs.

以下に，ツールが認識／尊重することが期待されるテーブルを列挙する。本PEPで指定されていないテーブルは、他のPEPで将来使用するために予約されている。

build-system table
------------------

The ``[build-system]`` table is used to store build-related data.
Initially only one key of the table will be valid and is mandatory
for the table: ``requires``. This key must have a value of a list
of strings representing PEP 508 dependencies required to execute the
build system (currently that means what dependencies are required to
execute a ``setup.py`` file).

``[build-system]``テーブルはビルド関連のデータを保存するために使われます。初期状態ではテーブルのキーは1つしか有効ではなく、このテーブルには必須です。それは ``requires`` です。このキーは、ビルドシステムを実行するために必要な PEP 508 依存関係を表す文字列のリストの値を持たなければなりません(現在は ``setup.py``ファイルを実行するために必要な依存関係を意味します)。

For the vast majority of Python projects that rely upon setuptools,
the ``pyproject.toml`` file will be::

setuptoolsに依存しているPythonプロジェクトの大部分では、 ``pyproject.toml`` ファイルは次のようになります。

  [build-system]
  # Minimum requirements for the build system to execute.
  requires = ["setuptools", "wheel"]  # PEP 508 specifications.

  # ビルドシステムを実行するための最低限の要件。
  requires = ["setuptools", "wheel"] # PEP 508 の仕様。

Because the use of setuptools and wheel are so expansive in the
community at the moment, build tools are expected to use the example
configuration file above as their default semantics when a
``pyproject.toml`` file is not present.

setuptools と wheel の使用法は現在のところコミュニティでは非常に広範囲にわたっているため、 ``pyproject.toml`` ファイルが存在しない場合、ビルドツールは上の設定ファイルの例をデフォルトのセマンティクスとして使用することが期待されています。

Tools should not require the existence of the ``[build-system]`` table.
A ``pyproject.toml`` file may be used to store configuration details
other than build-related data and thus lack a ``[build-system]`` table
legitimately. If the file exists but is lacking the ``[build-system]``
table then the default values as specified above should be used.
If the table is specified but is missing required fields then the tool
should consider it an error.

ツールは ``[build-system]`` テーブルの存在を必要とすべきではありません。 ``pyproject.toml`` ファイルはビルド関連のデータ以外の設定の詳細を保存するために使用され、 ``[build-system]``テーブルが存在しないことを正当化するために使用されているかもしれません。もしファイルが存在していても ``[build-system]`` テーブルがない場合は、上記のデフォルト値を使用してください。もしテーブルが指定されているにもかかわらず、必須フィールドが欠けている場合は、ツールはそれをエラーとみなすべきです。

tool table
----------

The ``[tool]`` table is where any tool related to your Python
project, not just build tools, can have users specify configuration
data as long as they use a sub-table within ``[tool]``, e.g. the
`flit <https://pypi.python.org/pypi/flit>`_ tool would store its
configuration in ``[tool.flit]``.

ビルドツールに限らず、Pythonプロジェクトに関連するツールであれば、``[tool]``の中のサブテーブルを使用していれば、 ``[tool]``テーブルは設定データをユーザに指定させることができます。

We need some mechanism to allocate names within the ``tool.*``
namespace, to make sure that different projects don't attempt to use
the same sub-table and collide. Our rule is that a project can use
the subtable ``tool.$NAME`` if, and only if, they own the entry for
``$NAME`` in the Cheeseshop/PyPI.

異なるプロジェクトが同じサブテーブルを使おうとして衝突しないようにするために、 ``tool.*`` 名前空間内で名前を割り当てるメカニズムが必要です。我々のルールでは、プロジェクトが ``tool.$NAME`` のサブテーブルを使用できるのは、Cheeseshop/PyPI の ``$NAME`` のエントリを所有している場合に限ります。

JSON Schema
-----------

To provide a type-specific representation of the resulting data from
the TOML file for illustrative purposes only, the following JSON
Schema [#jsonschema]_ would match the data format::

説明のためだけにTOMLファイルからの結果データの型固有の表現を提供するために、次のJSONスキーマ[#jsonschema]_はデータ形式に一致します::

  {
      "$schema": "http://json-schema.org/schema#",

      "type": "object",
      "additionalProperties": false,

      "properties": {
          "build-system": {
              "type": "object",
              "additionalProperties": false,

              "properties": {
                  "requires": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  }
              },
              "required": ["requires"]
          },

          "tool": {
              "type": "object"
          }
      }
  }


Rejected Ideas
==============

A semantic version key
----------------------

For future-proofing the structure of the configuration file, a
``semantics-version`` key was initially proposed. Defaulting to ``1``,
the idea was that if any semantics changes to previously defined keys
or tables occurred which were not backwards-compatible, then the
``semantics-version`` would be incremented to a new number.

設定ファイルの構造を将来的に保証するために、当初は ``semantics-version`` というキーが提案されていました。デフォルトは ``1`` で、以前に定義されたキーやテーブルのセマンティクスが変更されて後方互換性がなくなった場合には、 ``semantics-version`` の値を新しい番号にインクリメントするという考え方です。

In the end, though, it was decided that this was a premature
optimization. The expectation is that changes to what is pre-defined
semantically in the configuration file will be rather conservative.
And in the instances where a backwards-incompatible change would have
occurred, different names can be used for the new semantics to avoid
breaking older tools.

しかし、最終的には、これは時期尚早の最適化であると判断されました。設定ファイルで意味論的にあらかじめ定義されていることへの変更は、むしろ保守的なものになると予想されます。そして、後方互換性のない変更が発生した場合には、古いツールを壊さないように、新しいセマンティクスに別の名前を使用することができます。

A more nested namespace
-----------------------

An earlier draft of this PEP had a top-level ``[package]`` table. The
idea was to impose some scoping for a semantics versioning scheme
(see `A semantic version key`_ for why that idea was rejected).
With the need for scoping removed, the point of having a top-level
table became superfluous.

このPEPの初期の草稿には、トップレベルの ``[package]`` テーブルがありました。このアイデアは、セマンティクスのバージョン管理スキームのための スコーピングを課すものでした(このアイデアが却下された理由については `A semantic version key`_ を参照してください)。スコーピングの必要性が取り除かれたことで、トップレベルのテーブルを持つことの意味が不要になりました。


Other table names
-----------------

Another name proposed for the ``[build-system]`` table was
``[build]``. The alternative name is shorter, but doesn't convey as
much of the intention of what information is store in the table. After
a vote on the distutils-sig mailing list, the current name won out.

``[ビルドシステム]``テーブルのもう一つの名前は ``[build]`` です。別の名前の方が短いですが、テーブルにどのような情報が格納されているのかという意図があまり伝わりません。distutils-sigメーリングリストでの投票の結果、現在の名前が採用されました。

Other file formats
------------------

Several other file formats were put forward for consideration, all
rejected for various reasons. Key requirements were that the format
be editable by human beings and have an implementation that can be
vendored easily by projects. This outright excluded certain formats
like XML which are not friendly towards human beings and were never
seriously discussed.

他にもいくつかのファイルフォーマットが検討のために提案されましたが、いずれも様々な理由で却下されました。主要な要件は、人間が編集可能なフォーマットであることと、プロジェクトが簡単に販売できるように実装されていることでした。これにより、XMLのような人間に優しくないフォーマットは全く排除され、真剣に議論されることはありませんでした。

Overview of file formats considered
'''''''''''''''''''''''''''''''''''

The key reasons for rejecting the other alternatives considered are
summarised in the following sections, while the full review (including
positive arguments in favour of TOML) can be found at [#file_formats]_.

検討された他の選択肢を拒否した主な理由は以下のセクションに要約されているが、完全なレビュー(TOMLを支持する肯定的な議論を含む)は[#file_formats]_にある。

TOML was ultimately selected as it provided all the features we
were interested in, while avoiding the downsides introduced by
the alternatives.

TOMLが最終的に選ばれたのは、他の選択肢がもたらすデメリットを回避しつつ、私たちが興味を持っていたすべての機能を提供してくれたからです。

======================= ==== ==== ==== =======
Feature                 TOML YAML JSON CFG/INI
======================= ==== ==== ==== =======
Well-defined            yes  yes  yes
Real data types         yes  yes  yes
Reliable Unicode        yes  yes  yes
Reliable comments       yes  yes
Easy for humans to edit yes  ??        ??
Easy for tools to edit  yes  ??   yes  ??
In standard library               yes  yes
Easy for pip to vendor  yes       n/a  n/a
======================= ==== ==== ==== =======

("??" in the table indicates items where most folks would be
inclined to answer "yes", but there turn out to be a lot of
quirks and edge cases that arise in practice due to either
the lack of a clear specification, or else the underlying
file format specification being surprisingly complicated)

(表中の"？"は、ほとんどの人が "はい "と答えたくなるような項目を示していますが、実際には明確な仕様がないか、あるいは基礎となるファイルフォーマットの仕様が驚くほど複雑であるために、多くの奇妙さやエッジケースがあることがわかります) 

The ``pytoml`` TOML parser is ~300 lines of pure Python code,
so being outside the standard library didn't count heavily
against it.

``pytoml```のTOMLパーサは300行程度の純粋なPythonのコードなので、標準ライブラリの外にあることはあまり気にしていませんでした。

Python literals were also discussed as a potential format, but
weren't considered in the file format review (since they're not
a common pre-existing file format).

Pythonリテラルも潜在的なフォーマットとして議論されましたが、ファイルフォーマットのレビューでは考慮されませんでした（既存の一般的なファイルフォーマットではないため）。

JSON
''''

The JSON format [#json]_ was initially considered but quickly
rejected. While great as a human-readable, string-based data exchange
format, the syntax does not lend itself to easy editing by a human
being (e.g. the syntax is more verbose than necessary while not
allowing for comments).

JSONフォーマット[#json]_は当初検討されましたが、すぐに却下されました。人間が読める、文字列ベースのデータ交換フォーマットとしては優れていますが、その構文は人間が簡単に編集できるものではありません(例えば、構文は必要以上に冗長であり、コメントを許可していません)。

An example JSON file for the proposed data would be::

提案されたデータのJSONファイルの例は次のようになります::

    {
        "build": {
            "requires": [
                "setuptools",
                "wheel>=0.27"
            ]
        }
    }


YAML
''''

The YAML format [#yaml]_ was designed to be a superset of JSON
[#json]_ while being easier to work with by hand. There are three main
issues with YAML.

YAMLフォーマット [#yaml]_はJSON [#json]_のスーパーセットとして設計されました。YAMLには3つの主要な問題があります。

One is that the specification is large: 86 pages if printed on
letter-sized paper. That leaves the possibility that someone may use a
feature of YAML that works with one parser but not another. It has
been suggested to standardize on a subset, but that basically means
creating a new standard specific to this file which is not tractable
long-term.

1つは仕様が大きいということです: レターサイズの紙に印刷すると86ページになります。これは、あるパーサでは動作するが別のパーサでは動作しないYAMLの機能を誰かが使う可能性を残しています。サブセットを標準化することが提案されていますが、基本的にはこのファイルに特化した新しい標準を作成することを意味します。

Two is that YAML itself is not safe by default. The specification
allows for the arbitrary execution of code which is best avoided when
dealing with configuration data.  It is of course possible to avoid
this behavior -- for example, PyYAML provides a ``safe_load`` operation
-- but if any tool carelessly uses ``load`` instead then they open
themselves up to arbitrary code execution. While this PEP is focused on
the building of projects which inherently involves code execution,
other configuration data such as project name and version number may
end up in the same file someday where arbitrary code execution is not
desired.

2つ目はYAML自体がデフォルトでは安全ではないということです。この仕様では任意のコードの実行を許可していますが、これは設定データを扱うときには避けたほうがよいでしょう。 この動作を避けることはもちろん可能です -- 例えば、PyYAMLは ``safe_load`` オペレーションを提供しています -- しかし、もしどんなツールでも不注意に ``load`` を代わりに使ってしまうと、任意のコード実行の危険にさらされることになります。この PEP は本質的にコード実行を伴うプロジェクトの構築に焦点を当てていますが、プロジェクト名やバージョン番号のような他の設定データは、任意のコード実行が望まれない場合には、いつか同じファイルに入ってしまうかもしれません。

And finally, the most popular Python implementation of YAML is
PyYAML [#pyyaml]_ which is a large project of a few thousand lines of
code and an optional C extension module. While in and of itself this
isn't necessarily an issue, this becomes more of a problem for
projects like pip where they would most likely need to vendor PyYAML
as a dependency so as to be fully self-contained (otherwise you end
up with your install tool needing an install tool to work). A
proof-of-concept re-working of PyYAML has been done to see how easy
it would be to potentially vendor a simpler version of the library
which shows it is a possibility.

最後に、YAMLの最も人気のあるPythonの実装はPyYAML [#pyyaml]_で、数千行のコードとオプションのC拡張モジュールからなる大規模なプロジェクトです。これ自体は必ずしも問題ではありませんが、pipのようなプロジェクトでは、完全に自己完結するために依存関係としてPyYAMLをベンダーに提供する必要があります（そうしないと、インストールツールが動作するためにインストールツールを必要とすることになってしまいます）。PyYAML の概念実証のための再作業が行われ、可能性があることを示すシンプルなバージョンのライブラリをベンダにすることがどれだけ簡単になるかを確認しています。

An example YAML file is::

    build:
        requires:
            - setuptools
            - wheel>=0.27


configparser
''''''''''''

An INI-style configuration file based on what
configparser [#configparser]_ accepts was considered. Unfortunately
there is no specification of what configparser accepts, leading to
support skew between versions. For instance, what ConfigParser in
Python 2.7 accepts is not the same as what configparser in Python 3
accepts. While one could standardize on what Python 3 accepts and
simply vendor the backport of the configparser module, that does mean
this PEP would have to codify that the backport of configparser must
be used by all project wishes to consume the metadata specified by
this PEP. This is overly restrictive and could lead to confusion if
someone is not aware of that a specific version of configparser is
expected.

configparser [#configparser]_が何を受け入れるかに基づいたINIスタイルの設定ファイルが検討されました。残念ながら、configparserが何を受け入れるかの仕様がないため、バージョン間でのサポートのズレが生じています。例えば、Python 2.7のConfigParserが受け付けるものとPython 3のconfigparserが受け付けるものは同じではありません。Python 3が受け入れるものを標準化し、単純にconfigparserモジュールのバックポートを提供することもできますが、このPEPでは、このPEPで指定されたメタデータを使用したい全てのプロジェクトがconfigparserのバックポートを使用しなければならないということを意味します。これは過度に制限的で、もし誰かが特定のバージョンのconfigparserが期待されていることを知らない場合、混乱を招く可能性があります。

An example INI file is::

    [build]
    requires =
        setuptools
        wheel>=0.27


Python literals
'''''''''''''''

Someone proposed using Python literals as the configuration format.
The file would contain one dict at the top level, with the data all
inside that dict, with sections defined by the keys. All Python
programmers would be used to the format, there would implicitly be no
third-party dependency to read the configuration data, and it can be
safe if parsed by ``ast.literal_eval()`` [#ast_literal_eval]_.
Python literals can be identical to JSON, with the added benefit of
supporting trailing commas and comments. In addition, Python's richer
data model may be useful for some future configuration needs (e.g. non-string
dict keys, floating point vs. integer values).

誰かが設定フォーマットとして Python リテラルを使うことを提案しました。ファイルはトップレベルに一つのdictを含み、データは全てそのdictの中にあり、キーによって定義されたセクションを持つことになります。すべてのPythonプログラマーはこのフォーマットに慣れているでしょうし、暗黙のうちに設定データを読むためにサードパーティに依存する必要はありませんし、``ast.literal_eval()`` [#ast_literal_eval]_によって解析されれば安全です。PythonのリテラルはJSONと同じで、末尾のカンマとコメントをサポートしています。さらに、Pythonのリッチなデータモデルは、将来的な設定の必要性(例えば、非文字列のdictキー、浮動小数点と整数値の比較など)に役立つかもしれません。

On the other hand, python literals are a Python-specific format, and
it is anticipated that these data may need to be read by packaging
tools, etc. that are not written in Python.

一方、PythonリテラルはPython特有のフォーマットであり、これらのデータはPythonで書かれていないパッケージツールなどで読み込む必要があることが予想されます。

An example Python literal file for the proposed data would be::

    # The build configuration
    {"build": {"requires": ["setuptools",
                            "wheel>=0.27", # note the trailing comma
                            # "numpy>=1.10" # a commented out data line
                            ]
    # and here is an arbitrary comment.
               }
     }


Sticking with ``setup.cfg``
---------------------------

There are two issues with ``setup.cfg`` used by setuptools as a general
format. One is that they are ``.ini`` files which have issues as mentioned
in the configparser_ discussion above. The other is that the schema for
that file has never been rigorously defined and thus it's unknown which
format would be safe to use going forward without potentially confusing
setuptools installations.

setuptools が一般的なフォーマットとして使用する ``setup.cfg`` には二つの問題があります。一つは ``.ini`` ファイルであり、上の configparser_ の議論で述べたような問題があるということです。もう一つは、このファイルのスキーマが厳密に定義されていないため、 setuptools のインストールを混乱させることなく、今後どのフォーマットを使っても安全なのかが不明です。


Other file names
----------------

Several other file names were considered and rejected (although this
is very much a bikeshedding topic, and so the decision comes down to
mostly taste).

他にもいくつかのファイル名が検討され、却下されました(とはいえ、これは非常にバイクシェディングの話題が多いので、決定はほとんどが好みのものになってしまいますが)。

pysettings.toml
  Most reasonable alternative.

pypa.toml
  While it makes sense to reference the PyPA [#pypa]_, it is a
  somewhat niche term. It's better to have the file name make sense
  without having domain-specific knowledge.

pybuild.toml
  From the restrictive perspective of this PEP this filename makes
  sense, but if any non-build metadata ever gets added to the file
  then the name ceases to make sense.

pip.toml
  Too tool-specific.

meta.toml
  Too generic; project may want to have its own metadata file.

setup.toml
  While keeping with traditional thanks to ``setup.py``, it does not
  necessarily match what the file may contain in the future (e.g. is
  knowing the name of a project inherently part of its setup?).

pymeta.toml
  Not obvious to newcomers to programming and/or Python.

pypackage.toml & pypackaging.toml
  Name conflation of what a "package" is (project versus namespace).

pydevelop.toml
  The file may contain details not specific to development.

pysource.toml
  Not directly related to source code.

pytools.toml
  Misleading as the file is (currently) aimed at project management.

dstufft.toml
  Too person-specific. ;)


References
==========

.. [#distutils] distutils
   (https://docs.python.org/3/library/distutils.html#module-distutils)

.. [#setuptools] setuptools
   (https://pypi.python.org/pypi/setuptools)

.. [#setup_args] setuptools: New and Changed setup() Keywords
   (http://pythonhosted.org/setuptools/setuptools.html#new-and-changed-setup-keywords)

.. [#pip] pip
   (https://pypi.python.org/pypi/pip)

.. [#wheel] wheel
   (https://pypi.python.org/pypi/wheel)

.. [#toml] TOML
   (https://github.com/toml-lang/toml)

.. [#json] JSON
   (http://json.org/)

.. [#yaml] YAML
   (http://yaml.org/)

.. [#configparser] configparser
   (https://docs.python.org/3/library/configparser.html#module-configparser)

.. [#pyyaml] PyYAML
   (https://pypi.python.org/pypi/PyYAML)

.. [#pypa] PyPA
   (https://www.pypa.io)

.. [#bazel] Bazel
   (http://bazel.io/)

.. [#ast_literal_eval] ``ast.literal_eval()``
   (https://docs.python.org/3/library/ast.html#ast.literal_eval)

.. [#cargo] Cargo, Rust's package manager
   (http://doc.crates.io/)

.. [#jsonschema] JSON Schema
   (http://json-schema.org/)

.. [#file_formats] Nathaniel J. Smith's file format review
   (https://gist.github.com/njsmith/78f68204c5d969f8c8bc645ef77d4a8f)


Copyright
=========

This document has been placed in the public domain.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
